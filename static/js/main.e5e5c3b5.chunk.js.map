{"version":3,"sources":["../node_modules/peerjs/dist sync","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Webcall","useState","peerId","setPeerId","remotePeerIdValue","setRemotePeerIdValue","currentUserVideoRef","useRef","remoteVideoRef","peerInstance","currentCall","localStream","useEffect","peer","Peer","console","log","on","call","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","video","metadata","audio","mediaStream","current","srcObject","play","answer","remoteStream","hangUp","error","close","getTracks","forEach","track","stop","className","type","value","onChange","target","onClick","remotePeerId","audioCall","videoCall","audioTracks","getAudioTracks","enabled","videoTracks","getVideoTracks","ref","style","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.e5e5c3b5.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 11;","import { useEffect, useRef, useState } from 'react'\r\nimport Peer from 'peerjs' // version 1.3.2\r\n\r\nfunction Webcall() {\r\n    // State variables for storing peer ID and remote peer ID\r\n    const [peerId, setPeerId] = useState('')\r\n    const [remotePeerIdValue, setRemotePeerIdValue] = useState('')\r\n\r\n    // Refs for accessing video elements\r\n    const currentUserVideoRef = useRef(null)\r\n    const remoteVideoRef = useRef(null)\r\n\r\n    // Ref for storing the Peer instance\r\n    const peerInstance = useRef(null)\r\n\r\n    // Ref for storing the current call\r\n    const currentCall = useRef(null)\r\n\r\n    // Ref for storing the local media stream\r\n    const localStream = useRef(null)\r\n\r\n    useEffect(() => {\r\n        // Create a new instance of Peer\r\n        const peer = new Peer()\r\n\r\n        // Log the Peer instance for debugging purposes\r\n        console.log('peer', peer)\r\n\r\n        // Handle 'open' event when successfully connected to PeerServer\r\n        peer.on('open', (id) => {\r\n            console.log('id', id)\r\n            setPeerId(id)\r\n        })\r\n\r\n        // Handle 'call' event when receiving a call\r\n        peer.on('call', (call) => {\r\n            console.log('on call', call)\r\n            var getUserMedia = navigator?.getUserMedia || navigator?.webkitGetUserMedia || navigator?.mozGetUserMedia\r\n\r\n            getUserMedia(\r\n                { video: call?.metadata?.video, audio: true }, // Determine whether it's an audio or video call\r\n                (mediaStream) => {\r\n                    // Display the local media stream\r\n                    currentUserVideoRef.current.srcObject = mediaStream\r\n                    currentUserVideoRef?.current?.play()\r\n                    // Answer the call and display the remote stream\r\n                    call?.answer(mediaStream)\r\n                    call.on('stream', function (remoteStream) {\r\n                        console.log(\r\n                            'remoteStream',\r\n                            remoteStream,\r\n                            remoteVideoRef.current,\r\n                            remoteVideoRef.current.srcObject\r\n                        )\r\n                        if (!remoteVideoRef.current.srcObject) {\r\n                            remoteVideoRef.current.srcObject = remoteStream\r\n                            remoteVideoRef?.current?.play()\r\n                        }\r\n                    })\r\n                    // Handle call termination by either party\r\n                    call.on('close', () => {\r\n                        console.log('Call closed')\r\n                        hangUp() // Terminate call on callee's side as well\r\n                    })\r\n                    // Store the local media stream\r\n                    localStream.current = mediaStream\r\n                },\r\n                (error) => {\r\n                    console.log('Failed to get local stream', error)\r\n                }\r\n            )\r\n            // Store the current call\r\n            currentCall.current = call\r\n        })\r\n\r\n        // Handle 'close' event when the connection to PeerServer is closed\r\n        peer.on('close', () => {\r\n            console.log('Connection to PeerServer closed')\r\n            // Perform cleanup or additional logic for hang-up or disconnect here\r\n            hangUp()\r\n        })\r\n\r\n        // Store the Peer instance\r\n        peerInstance.current = peer\r\n    }, [])\r\n\r\n    // Function to initiate an audio call\r\n    const audioCall = (remotePeerId) => {\r\n        var getUserMedia = navigator?.getUserMedia || navigator?.webkitGetUserMedia || navigator?.mozGetUserMedia\r\n\r\n        getUserMedia(\r\n            { video: false, audio: true },\r\n            (mediaStream) => {\r\n                // Display the local media stream\r\n                currentUserVideoRef.current.srcObject = mediaStream\r\n                currentUserVideoRef?.current?.play()\r\n\r\n                // Initiate the call and display the remote stream\r\n                const call = peerInstance?.current?.call(remotePeerId, mediaStream, { metadata: { video: false } })\r\n\r\n                call.on('stream', (remoteStream) => {\r\n                    console.log('remoteStream', remoteStream)\r\n                    if (!remoteVideoRef.current.srcObject) {\r\n                        remoteVideoRef.current.srcObject = remoteStream\r\n                        remoteVideoRef?.current?.play()\r\n                    }\r\n                })\r\n                // Store the current call\r\n                currentCall.current = call\r\n                // Store the local media stream\r\n                localStream.current = mediaStream\r\n            },\r\n            (error) => {\r\n                console.log('Failed to get local stream', error)\r\n            }\r\n        )\r\n    }\r\n\r\n    // Function to initiate a video call\r\n    const videoCall = (remotePeerId) => {\r\n        var getUserMedia = navigator?.getUserMedia || navigator?.webkitGetUserMedia || navigator?.mozGetUserMedia\r\n\r\n        getUserMedia(\r\n            { video: true, audio: true },\r\n            (mediaStream) => {\r\n                // Display the local media stream\r\n                currentUserVideoRef.current.srcObject = mediaStream\r\n                currentUserVideoRef?.current?.play()\r\n\r\n                // Initiate the call and display the remote stream\r\n                const call = peerInstance?.current?.call(remotePeerId, mediaStream, { metadata: { video: true } })\r\n\r\n                call.on('stream', (remoteStream) => {\r\n                    console.log('remoteStream', remoteStream)\r\n                    if (!remoteVideoRef.current.srcObject) {\r\n                        remoteVideoRef.current.srcObject = remoteStream\r\n                        remoteVideoRef?.current?.play()\r\n                    }\r\n                })\r\n                // Store the current call\r\n                currentCall.current = call\r\n                // Store the local media stream\r\n                localStream.current = mediaStream\r\n            },\r\n            (error) => {\r\n                console.log('Failed to get local stream', error)\r\n            }\r\n        )\r\n    }\r\n\r\n    // Function to hang up the call\r\n    const hangUp = () => {\r\n        if (currentCall?.current) {\r\n            // Close the local call\r\n            currentCall?.current?.close()\r\n            currentUserVideoRef.current.srcObject = null\r\n            remoteVideoRef.current.srcObject = null\r\n            // Stop all tracks in the local media stream\r\n            localStream?.current?.getTracks()?.forEach((track) => track?.stop())\r\n        }\r\n    }\r\n\r\n    // Function to toggle mute/unmute audio\r\n    const toggleAudio = () => {\r\n        if (localStream?.current) {\r\n            const audioTracks = localStream?.current?.getAudioTracks()\r\n            audioTracks?.forEach((track) => {\r\n                track.enabled = !track?.enabled // Toggle the enabled state of the audio track\r\n            })\r\n        }\r\n    }\r\n\r\n    // Function to toggle enable/disable video\r\n    const toggleVideo = () => {\r\n        if (localStream?.current) {\r\n            const videoTracks = localStream?.current?.getVideoTracks()\r\n            videoTracks?.forEach((track) => {\r\n                track.enabled = !track?.enabled // Toggle the enabled state of the video track\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div>{peerId}</div>\r\n\r\n            <input type=\"text\" value={remotePeerIdValue} onChange={(e) => setRemotePeerIdValue(e?.target?.value)} />\r\n\r\n            <div>\r\n                <button onClick={() => audioCall(remotePeerIdValue)}>Audio Call</button>\r\n\r\n                <button onClick={() => videoCall(remotePeerIdValue)}>Video Call</button>\r\n\r\n                <button onClick={toggleAudio}>Toggle Audio</button>\r\n\r\n                <button onClick={toggleVideo}>Toggle Video</button>\r\n\r\n                <button onClick={() => hangUp()}>Hang Up</button>\r\n            </div>\r\n\r\n            <div>\r\n                <video ref={currentUserVideoRef} style={{ width: '100px' }} />\r\n            </div>\r\n            <div>\r\n                <video ref={remoteVideoRef} style={{ width: '100px' }} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Webcall\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}